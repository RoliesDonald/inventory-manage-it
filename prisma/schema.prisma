// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  Items             Items[]
  createdAt         DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  AddStockAdjusment AddStockAdjusment[]
}

model Unit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  abreviation String
  Items       Items[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Brand {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  createdAt         DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  Items             Items[]
  AddStockAdjusment AddStockAdjusment[]
}

model Items {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  title                  String
  partNum                String
  brand                  Brand                    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId                String                   @db.ObjectId
  category               Category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId             String                   @db.ObjectId
  barcode                String
  sku                    String
  quantity               Int
  unit                   Unit                     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId                 String                   @db.ObjectId
  isRetail               Boolean?
  amount                 Int
  buyPrice               Int
  sellPrice              Int
  reOrderPoint           Int
  supplier               Supplier                 @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId             String                   @db.ObjectId
  isTax                  Boolean?
  taxRate                Float
  warehouse              Warehouse                @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId            String                   @db.ObjectId
  itemNote               String
  itemDesc               String
  imageUrl               String?
  AddStockAdjusment      AddStockAdjusment[]
  createdAt              DateTime                 @default(now())
  updateAt               DateTime                 @updatedAt
  TransferStockAdjusment TransferStockAdjusment[]
}

model Warehouse {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  warehouseType      String
  province           String
  city               String
  distric            String
  subDistric         String
  detail             String?
  addStockAdjustment AddStockAdjusment[]
  Items              Items[]
  createdAt          DateTime            @default(now())
  updateAt           DateTime            @updatedAt
}

model AddStockAdjusment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  refNum      String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     String    @db.ObjectId
  item        Items     @relation(fields: [itemId], references: [id])
  itemId      String    @db.ObjectId
  addStockQty Int       @default(0)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId String    @db.ObjectId
  notes       String?
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}

model TransferStockAdjusment {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  refNum              String
  item                Items    @relation(fields: [itemId], references: [id])
  itemId              String   @db.ObjectId
  transferStockQty    Int      @default(0)
  notes               String?
  receiverWarehouseId String
  senderWarehouseId   String
  createdAt           DateTime @default(now())
  updateAt            DateTime @updatedAt
}

model Supplier {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  phone         String?
  email         String?
  province      String
  city          String
  distric       String
  subdistrict   String
  addressDetail String?
  contactPerson String?
  supplierCode  String
  paymentTerms  String?
  taxID         String?
  notes         String?
  Items         Items[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}
